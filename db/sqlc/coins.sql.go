// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: coins.sql

package db

import (
	"context"
)

const createCoin = `-- name: CreateCoin :one
INSERT INTO coins (name, symbol) VALUES ($1, $2) RETURNING coin_id, name, symbol, created_at, updated_at, deleted_at
`

type CreateCoinParams struct {
	Name   string `json:"name"`
	Symbol string `json:"symbol"`
}

func (q *Queries) CreateCoin(ctx context.Context, arg CreateCoinParams) (Coins, error) {
	row := q.queryRow(ctx, q.createCoinStmt, createCoin, arg.Name, arg.Symbol)
	var i Coins
	err := row.Scan(
		&i.CoinID,
		&i.Name,
		&i.Symbol,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCoins = `-- name: GetCoins :many
SELECT coin_id, name, symbol, created_at, updated_at, deleted_at FROM coins ORDER BY name
LIMIT $1 OFFSET $2
`

type GetCoinsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetCoins(ctx context.Context, arg GetCoinsParams) ([]Coins, error) {
	rows, err := q.query(ctx, q.getCoinsStmt, getCoins, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Coins
	for rows.Next() {
		var i Coins
		if err := rows.Scan(
			&i.CoinID,
			&i.Name,
			&i.Symbol,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
